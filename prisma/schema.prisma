// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Criar -> npx prisma db push
// Gerar as tabelas -> npx prisma generate
// Visualizar banco de dados -> npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo para representar uma pessoa do time
model User {
  id       Int        @id @default(autoincrement())
  name     String
  office   String // front, back, fullstack, QA, Design
  projects Team[]
  tasks    UserTask[]

  @@map("users")
}

// Modelo para representar um projeto
model Project {
  id          Int       @id @default(autoincrement())
  initialDate DateTime
  endDate     DateTime?
  name        String
  description String
  users       Team[]
  status      String    @default("inProgress") // completed, inProgress, canceled  
  Sprint      Sprint[]

  @@map("projects")
}

// // Relacionamento entre Pessoa e Projeto
model Team {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  role      String // PO, SM, DEV, QA

  @@id([userId, projectId])
  @@map("teams")
}

// // Modelo para representar uma sprint do projeto
model Sprint {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  tasks     Task[]
}

// // Modelo para representar uma tarefa
model Task {
  id          Int        @id @default(autoincrement())
  name        String
  histories   History[]
  responsible UserTask[]
  status      String // Todo, Doing, Done, QA
  Sprint      Sprint?    @relation(fields: [sprintId], references: [id])
  sprintId    Int?
}

model UserTask {
  userId Int
  taskId Int
  user   User @relation(fields: [userId], references: [id])
  task   Task @relation(fields: [taskId], references: [id])

  @@id([userId, taskId])
}

// // Modelo para representar uma hist√≥ria do projeto
model History {
  id          Int    @id @default(autoincrement())
  description String
  task        Task?  @relation(fields: [taskId], references: [id])
  taskId      Int?
}
